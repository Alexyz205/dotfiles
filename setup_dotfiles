#!/bin/bash
set -euo pipefail

# ===============================================
# Dotfiles Environment Setup Script
# ===============================================
# Handles the initial setup of dotfiles including git submodules
# and required system packages before the main configuration.
#
# Author: Alexis
# Version: 2.0
# Last Updated: 2025-08-07

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"

# Initialize error handling
if [ -f "$SCRIPT_DIR/scripts/error_handling" ]; then
    source "$SCRIPT_DIR/scripts/error_handling"
    init_error_handling "setup-dotfiles"
else
    set -euo pipefail
fi

# Source logs if available, otherwise create minimal logging functions
# These functions will be replaced once the full logging system is available
if [ -f "$SCRIPT_DIR/scripts/logs" ]; then
    source "$SCRIPT_DIR/scripts/logs"
else
    # Minimal logging functions if logs script is not yet available
    # Function to get current timestamp in ISO 8601 format
    get_timestamp() {
      date +"%Y-%m-%d %H:%M:%S"
    }

    # Core logging functions with timestamp and log type - no fancy formatting
    log() { echo "[$(get_timestamp)][INFO] $1"; }
    log_error() { echo "[$(get_timestamp)][ERROR] $1"; }
    log_success() { echo "[$(get_timestamp)][SUCCESS] $1"; }
    log_warning() { echo "[$(get_timestamp)][WARNING] $1"; }
    log_progress() { echo "[$(get_timestamp)][PROGRESS] $1"; }
    log_complete() { echo "[$(get_timestamp)][COMPLETE] $1"; }

    # Error and exit helper
    error_exit() { log_error "$1"; exit 1; }

    # Simple section header
    section_header() {
        echo -e "\n===== $1 =====\n"
    }
fi

# Source checker script for sudo handling
if [ -f "$SCRIPT_DIR/scripts/checker" ]; then
    source "$SCRIPT_DIR/scripts/checker"
    check_sudo
    setup_sudo_wrapper
else
    log_warning "Checker script not found. Creating fallback sudo handling."
    # Define sudo function directly in this script
    if command -v sudo &>/dev/null; then
        log_progress "Sudo is available and will be used for privileged operations"
        sudo() {
            command sudo "$@"
        }
    else
        log_warning "Sudo is not available. Running with current user privileges."
        log_warning "Some operations may fail if they require elevated permissions."
        # Create a sudo function that just runs the command without sudo
        sudo() {
            "$@"
        }
    fi
    export -f sudo
fi

# Display help information when requested
if [[ "${1:-}" == "--help" ]]; then
    section_header "Dotfiles Setup"
    echo "Usage: setup_dotfiles [--help]"
    echo "This script sets up the dotfiles by installing git submodules and running the setup script."
    echo "It also changes the default shell to zsh."
    echo
    echo "The setup process will:"
    echo "  1. Install required system packages"
    echo "  2. Initialize git submodules to retrieve components"
    echo "  3. Run the main dotfiles setup script"
    echo "  4. Change the default shell to zsh"
    exit 0
fi

section_header "Initializing Dotfiles"

# Detect and install required system packages based on available package manager
install_required_packages() {
    section_header "Installing Required Packages"

    # Use the appropriate package manager for the current system
    if command -v apt-get &> /dev/null; then
        log_progress "Detected apt package manager"
        log_progress "Updating package index..."

        # First try without sudo
        apt-get update -qq 2>/dev/null || {
            # If that fails, try with sudo
            sudo apt-get update -qq || {
                log_warning "Failed to update package index - continuing anyway"
            }
        }

        log_progress "Installing required packages..."
        # First try without sudo
        apt-get install -y -qq curl git tar wget unzip apt-transport-https \
            ca-certificates gnupg lsb-release build-essential 2>/dev/null || {
            # If that fails, try with sudo
            sudo apt-get install -y -qq curl git tar wget unzip apt-transport-https \
                ca-certificates gnupg lsb-release build-essential || {
                log_warning "Failed to install some packages - continuing anyway"
            }
        }
    elif command -v dnf &> /dev/null; then
        log_progress "Detected dnf package manager"
        log_progress "Installing required packages..."
        # First try without sudo
        dnf install -y -q curl git tar wget unzip ca-certificates gnupg \
            make gcc gcc-c++ redhat-lsb-core 2>/dev/null || {
            # If that fails, try with sudo
            sudo dnf install -y -q curl git tar wget unzip ca-certificates gnupg \
                make gcc gcc-c++ redhat-lsb-core || {
                log_warning "Failed to install some packages - continuing anyway"
            }
        }
    elif command -v yum &> /dev/null; then
        log_progress "Detected yum package manager"
        log_progress "Installing required packages..."
        # First try without sudo
        yum install -y -q curl git tar wget unzip ca-certificates gnupg \
            make gcc gcc-c++ redhat-lsb-core 2>/dev/null || {
            # If that fails, try with sudo
            sudo yum install -y -q curl git tar wget unzip ca-certificates gnupg \
                make gcc gcc-c++ redhat-lsb-core || {
                log_warning "Failed to install some packages - continuing anyway"
            }
        }
    elif command -v pacman &> /dev/null; then
        log_progress "Detected pacman package manager"
        log_progress "Installing required packages..."
        # First try without sudo
        pacman -Syq --noconfirm curl git tar wget unzip ca-certificates gnupg base-devel 2>/dev/null || {
            # If that fails, try with sudo
            sudo pacman -Syq --noconfirm curl git tar wget unzip ca-certificates gnupg base-devel || {
                log_warning "Failed to install some packages - continuing anyway"
            }
        }
    else
        log_warning "Unsupported package manager. You may need to install dependencies manually:"
        log_warning "  - curl, git, tar, wget, unzip, build tools"
    fi

    log_progress "Package installation process completed"
}

# ===============================================
# Prerequisites Installation
# ===============================================

# Install required system packages before proceeding with setup
log_progress "Installing system prerequisites"
if ! install_required_packages; then
    log_warning "Some system packages may not have been installed properly"
    log_warning "Continuing with setup, but some features may not work"
fi

# ===============================================
# Directory Validation
# ===============================================

# Ensure we have the correct dotfiles directory path regardless of execution location
DOTFILES_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
SCRIPT_DIR="$DOTFILES_DIR/scripts"

log_progress "Validating directory structure"
log_progress "Dotfiles directory: $DOTFILES_DIR"
log_progress "Scripts directory: $SCRIPT_DIR"

# Validate critical directories exist
if [ ! -d "$SCRIPT_DIR" ]; then
    error_exit "Scripts directory not found: $SCRIPT_DIR"
fi

# ===============================================
# Git Submodules Initialization
# ===============================================

# Initialize required git submodules for core functionality
log_progress "Initializing git submodules"
submodules=("scripts" "nvim")

for submodule in "${submodules[@]}"; do
    log_progress "Checking submodule: $submodule"
    
    if [ ! -d "$DOTFILES_DIR/$submodule" ]; then
        log_warning "Submodule directory missing: $submodule"
    fi
    
    log_progress "Initializing $submodule submodule"
    if git -C "$DOTFILES_DIR" submodule update --init --recursive -- "$submodule"; then
        log_success "Successfully initialized $submodule submodule"
    else
        log_error "Failed to initialize $submodule submodule"
        error_exit "Critical submodule initialization failed: $submodule"
    fi
done

log_success "All git submodules initialized successfully"

# ===============================================
# Main Setup Execution
# ===============================================

# Execute the main setup script to configure dotfiles
section_header "Running Setup Script"
log_progress "Executing main setup script"

# Validate setup script exists
if [ ! -f "$SCRIPT_DIR/setup" ]; then
    error_exit "Setup script not found: $SCRIPT_DIR/setup"
fi

if [ ! -x "$SCRIPT_DIR/setup" ]; then
    log_warning "Setup script not executable, attempting to fix"
    chmod +x "$SCRIPT_DIR/setup" || error_exit "Failed to make setup script executable"
fi

export DOTFILES_DIR
if source "$SCRIPT_DIR/setup"; then
    log_success "Setup script completed successfully"
else
    error_exit "Setup script failed with exit code $?"
fi

section_header "Setup Complete"
log_complete "Dotfiles have been successfully set up!"
echo
echo "Your development environment is ready to use."
echo "Start a new terminal session or run exec bash to apply changes."
