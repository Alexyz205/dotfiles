#!/bin/bash
# Environment setup script for dotfiles
# This script handles the initial setup of dotfiles including git submodules
# and required system packages before the main configuration
set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"

# Source logs if available, otherwise create minimal logging functions
# These functions will be replaced once the full logging system is available
if [ -f "$SCRIPT_DIR/scripts/logs" ]; then
    source "$SCRIPT_DIR/scripts/logs"
else
    # Minimal logging functions if logs script is not yet available
    # Function to get current timestamp in ISO 8601 format
    get_timestamp() {
      date +"%Y-%m-%d %H:%M:%S"
    }

    # Core logging functions with timestamp and log type - no fancy formatting
    log() { echo "[$(get_timestamp)][INFO] $1"; }
    log_error() { echo "[$(get_timestamp)][ERROR] $1"; }
    log_success() { echo "[$(get_timestamp)][SUCCESS] $1"; }
    log_warning() { echo "[$(get_timestamp)][WARNING] $1"; }
    log_progress() { echo "[$(get_timestamp)][PROGRESS] $1"; }
    log_complete() { echo "[$(get_timestamp)][COMPLETE] $1"; }

    # Error and exit helper
    error_exit() { log_error "$1"; exit 1; }

    # Simple section header
    section_header() {
        echo -e "\n===== $1 =====\n"
    }
fi

# Display help information when requested
if [[ "$1" == "--help" ]]; then
    section_header "Dotfiles Setup"
    echo "Usage: setup_dotfiles [--help]"
    echo "This script sets up the dotfiles by installing git submodules and running the setup script."
    echo "It also changes the default shell to zsh."
    echo
    echo "The setup process will:"
    echo "  1. Install required system packages"
    echo "  2. Initialize git submodules to retrieve components"
    echo "  3. Run the main dotfiles setup script"
    echo "  4. Change the default shell to zsh"
    exit 0
fi

section_header "Initializing Dotfiles"

# Detect and install required system packages based on available package manager
install_required_packages() {
    section_header "Installing Required Packages"

    # Use the appropriate package manager for the current system
    if command -v apt-get &> /dev/null; then
        log_progress "Detected apt package manager"
        log_progress "Updating package index..."
        sudo apt-get update -qq || error_exit "Failed to update package index"

        log_progress "Installing required packages..."
        sudo apt-get install -y -qq curl git tar wget unzip apt-transport-https \
            ca-certificates gnupg lsb-release build-essential \
            || error_exit "Failed to install required packages"
    elif command -v dnf &> /dev/null; then
        log_progress "Detected dnf package manager"
        log_progress "Installing required packages..."
        sudo dnf install -y -q curl git tar wget unzip ca-certificates gnupg \
            make gcc gcc-c++ redhat-lsb-core \
            || error_exit "Failed to install required packages"
    elif command -v yum &> /dev/null; then
        log_progress "Detected yum package manager"
        log_progress "Installing required packages..."
        sudo yum install -y -q curl git tar wget unzip ca-certificates gnupg \
            make gcc gcc-c++ redhat-lsb-core \
            || error_exit "Failed to install required packages"
    elif command -v pacman &> /dev/null; then
        log_progress "Detected pacman package manager"
        log_progress "Installing required packages..."
        sudo pacman -Syq --noconfirm curl git tar wget unzip ca-certificates gnupg base-devel \
            || error_exit "Failed to install required packages"
    else
        log_warning "Unsupported package manager. You may need to install dependencies manually:"
        log_warning "  - curl, git, tar, wget, unzip, build tools"
        return 1
    fi

    log_success "Required packages installed successfully"
}

# Install required system packages before proceeding with setup
install_required_packages

# Ensure we have the correct dotfiles directory path regardless of execution location
DOTFILES_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
log_progress "Using dotfiles directory: $DOTFILES_DIR"

SCRIPT_DIR="$DOTFILES_DIR/scripts"

# Initialize required git submodules for core functionality
log_progress "Initializing git submodules"
for submodule in "scripts" "tmux" "nvim"; do
    log_progress "Initializing $submodule submodule"
    git -C "$DOTFILES_DIR" submodule update --init --recursive -- "$submodule" || error_exit "Failed to initialize $submodule submodule"
done
log_success "Git submodules initialized successfully"

# Execute the main setup script to configure dotfiles
section_header "Running Setup Script"
log_progress "Executing main setup script"

export DOTFILES_DIR
source "$SCRIPT_DIR/setup" || error_exit "Setup script failed"

section_header "Setup Complete"
log_complete "Dotfiles have been successfully set up!"
echo
echo "Your development environment is ready to use."
echo "Start a new terminal session or run exec bash to apply changes."
