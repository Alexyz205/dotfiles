#!/bin/bash
set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"

# Source logs if available, otherwise define minimal color functionality
if [ -f "$SCRIPT_DIR/scripts/logs" ]; then
    source "$SCRIPT_DIR/scripts/logs"
else
    # Fallback minimal color definitions
    BLUE="\e[34m"
    RED="\e[31m"
    GREEN="\e[32m"
    YELLOW="\e[33m"
    BOLD="\e[1m"
    RESET="\e[0m"

    # Define basic logging functions
    log() { echo -e "${BLUE}[INFO]${RESET} $1"; }
    log_error() { echo -e "${RED}[ERROR]${RESET} $1"; }
    error_exit() { log_error "$1"; exit 1; }
    log_success() { echo -e "${GREEN}[SUCCESS]${RESET} $1"; }
    log_warning() { echo -e "${YELLOW}[WARNING]${RESET} $1"; }

    section_header() {
        local title=$1
        echo -e "\n${BOLD}${BLUE}=== $title ===${RESET}\n"
    }

    log_progress() { echo -e "${BLUE}[PROGRESS]${RESET} $1"; }
    log_complete() { echo -e "${GREEN}[COMPLETE]${RESET} $1"; }
fi

# Help option
if [[ "$1" == "--help" ]]; then
    section_header "Dotfiles Setup"
    echo "Usage: setup_dotfiles [--help]"
    echo "This script sets up the dotfiles by installing git submodules and running the setup script."
    echo "It also changes the default shell to zsh."
    echo
    echo "The setup process will:"
    echo "  1. Install required system packages"
    echo "  2. Initialize git submodules to retrieve components"
    echo "  3. Run the main dotfiles setup script"
    echo "  4. Change the default shell to zsh"
    exit 0
fi

section_header "Initializing Dotfiles"

# Set DOTFILES_DIR if not already defined
if [ -z "$DOTFILES_DIR" ]; then
    DOTFILES_DIR="$HOME/repos/dotfiles"
    log_warning "DOTFILES_DIR wasn't set, using default: ${BOLD}$DOTFILES_DIR${RESET}"
else
    log "Using dotfiles directory: ${BOLD}$DOTFILES_DIR${RESET}"
fi

# Function to handle selective git submodule initialization
install_git_submodules() {
    section_header "Git Submodules Management"

    # Get list of available submodules
    log_progress "Scanning available git submodules..."
    local submodules=$(git -C "$DOTFILES_DIR" config --file .gitmodules --get-regexp path | awk '{ print $2 }')

    if [ -z "$submodules" ]; then
        log_warning "No git submodules found in repository"
        return 0
    fi

    # Check if --all flag was provided
    if [[ "$1" == "--all" ]]; then
        log_progress "Installing all git submodules"
        git -C "$DOTFILES_DIR" submodule update --init --recursive || error_exit "Failed to initialize git submodules"
        log_success "All git submodules initialized successfully"
        return 0
    fi

    # Interactive selection
    log "Available submodules:"
    local i=1
    local submodule_array=()

    while IFS= read -r module; do
        echo "  ${i}) ${BOLD}${module}${RESET}"
        submodule_array+=("$module")
        ((i++))
    done <<< "$submodules"

    echo "  ${i}) ${BOLD}All submodules${RESET}"
    echo "  $((i+1))) ${BOLD}None${RESET}"

    # Prompt user for selection
    local selected
    while true; do
        read -p "Enter the numbers of submodules to install (comma-separated, e.g. 1,3,4): " selected

        if [[ "$selected" == "$i" ]]; then
            # All submodules selected
            log_progress "Installing all git submodules"
            git -C "$DOTFILES_DIR" submodule update --init --recursive || error_exit "Failed to initialize git submodules"
            log_success "All git submodules initialized successfully"
            return 0
        elif [[ "$selected" == "$((i+1))" ]]; then
            # None selected
            log_warning "No submodules will be installed"
            return 0
        elif [[ "$selected" =~ ^[0-9]+(,[0-9]+)*$ ]]; then
            # Comma-separated list of numbers
            break
        else
            log_error "Invalid selection. Please enter comma-separated numbers."
        fi
    done

    # Process selections
    IFS=',' read -ra indices <<< "$selected"
    for index in "${indices[@]}"; do
        if ((index > 0 && index < i)); then
            local module="${submodule_array[$((index-1))]}"
            log_progress "Initializing ${BOLD}${module}${RESET}"
            git -C "$DOTFILES_DIR" submodule update --init --recursive -- "$module" || \
                error_exit "Failed to initialize submodule: $module"
        else
            log_warning "Invalid selection: $index (ignored)"
        fi
    done

    log_success "Selected git submodules initialized successfully"
}

# Install required packages
install_required_packages() {
    section_header "Installing Required Packages"

    # Detect package manager
    if command -v apt-get &> /dev/null; then
        log_progress "Detected apt package manager"
        log_progress "Updating package index..."
        sudo apt-get update -qq || error_exit "Failed to update package index"

        log_progress "Installing required packages..."
        sudo apt-get install -y -qq curl git tar wget unzip apt-transport-https \
            ca-certificates gnupg lsb-release build-essential \
            || error_exit "Failed to install required packages"
    elif command -v dnf &> /dev/null; then
        log_progress "Detected dnf package manager"
        log_progress "Installing required packages..."
        sudo dnf install -y -q curl git tar wget unzip ca-certificates gnupg \
            make gcc gcc-c++ redhat-lsb-core \
            || error_exit "Failed to install required packages"
    elif command -v yum &> /dev/null; then
        log_progress "Detected yum package manager"
        log_progress "Installing required packages..."
        sudo yum install -y -q curl git tar wget unzip ca-certificates gnupg \
            make gcc gcc-c++ redhat-lsb-core \
            || error_exit "Failed to install required packages"
    elif command -v pacman &> /dev/null; then
        log_progress "Detected pacman package manager"
        log_progress "Installing required packages..."
        sudo pacman -Syq --noconfirm curl git tar wget unzip ca-certificates gnupg base-devel \
            || error_exit "Failed to install required packages"
    else
        log_warning "Unsupported package manager. You may need to install dependencies manually:"
        log_warning "  - curl, git, tar, wget, unzip, build tools"
        return 1
    fi

    log_success "Required packages installed successfully"
}

# Install required packages before proceeding
install_required_packages

SCRIPT_DIR="$DOTFILES_DIR/scripts"

# Initialize git submodules with selection
install_git_submodules

# Call the setup script
section_header "Running Setup Script"
log_progress "Executing main setup script"

export DOTFILES_DIR
source "$SCRIPT_DIR/setup" || error_exit "Setup script failed"

section_header "Setup Complete"
log_complete "Dotfiles have been successfully set up!"
echo
echo "Your development environment is ready to use."
echo -e "Start a new terminal session or run ${BOLD}exec bash${RESET} to apply changes."
