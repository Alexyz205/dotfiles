#!/bin/bash
# Main installer script for dotfiles
# This script serves as the primary entry point for setting up the entire development environment

# Initialize comprehensive error handling
SCRIPT_NAME="dotfiles-install"

# Define absolute paths regardless of where the script is called from
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
DOTFILES_DIR="$(cd "$SCRIPT_DIR" && pwd)"

# Source comprehensive error handling system
if [ -f "$DOTFILES_DIR/scripts/error_handling" ]; then
    source "$DOTFILES_DIR/scripts/error_handling"
    init_error_handling "$SCRIPT_NAME"
else
    # Fallback to basic error handling
    set -euo pipefail
fi

# Source logging utilities if available, or create minimal logging functions
if [ -f "$DOTFILES_DIR/scripts/logs" ]; then
    source "$DOTFILES_DIR/scripts/logs"
else
    # Fallback logging functions
    # Function to get current timestamp in ISO 8601 format
    get_timestamp() {
      date +"%Y-%m-%d %H:%M:%S"
    }

    # Core logging functions with timestamp and log type - no fancy formatting
    log() { echo "[$(get_timestamp)][INFO] $1"; }
    log_error() { echo "[$(get_timestamp)][ERROR] $1"; }
    log_success() { echo "[$(get_timestamp)][SUCCESS] $1"; }
    log_warning() { echo "[$(get_timestamp)][WARNING] $1"; }
    log_progress() { echo "[$(get_timestamp)][PROGRESS] $1"; }
    log_complete() { echo "[$(get_timestamp)][COMPLETE] $1"; }

    # Error and exit helper
    error_exit() { log_error "$1"; exit 1; }

    # Simple section header
    section_header() {
        echo -e "\n===== $1 =====\n"
    }
fi

# Source utility functions
if [ -f "$DOTFILES_DIR/scripts/utils" ]; then
    source "$DOTFILES_DIR/scripts/utils"
fi

# Validate multiple prerequisites and return 0 if all are available, 1 if any are missing
validate_prerequisites() {
    local missing_tools=()
    local all_good=true
    
    for tool in "$@"; do
        if ! command -v "$tool" &> /dev/null; then
            missing_tools+=("$tool")
            all_good=false
        fi
    done
    
    if [ ${#missing_tools[@]} -gt 0 ]; then
        log_error "Missing required tools: ${missing_tools[*]}"
        return 1
    fi
    
    log_progress "All prerequisites validated: $*"
    return 0
}

# Display help information when requested
if [[ "${1:-}" == "--help" ]]; then
    section_header "Dotfiles Installer"
    echo "Usage: ./install [--help]"
    echo "This script sets up the dotfiles environment."
    echo
    echo "The installation process will:"
    echo "  1. Run the setup_dotfiles script to configure dotfiles and update git submodules"
    echo "  2. Install required packages"
    echo
    exit 0
fi

# Set non-interactive mode for automated installations
export DEBIAN_FRONTEND=noninteractive

section_header "Dotfiles Installation"

# Validate prerequisites
validate_prerequisites "git" "curl" "tar" || {
    log_error "Prerequisites validation failed. Please install missing tools and try again."
    exit 1
}


# Installation steps with logging
log "Starting dotfiles installation process"

# Step 1: Run setup script to initialize the environment
log "Running dotfiles setup and configuration"
if bash "$DOTFILES_DIR/setup_dotfiles"; then
    log_success "Dotfiles setup completed successfully"
else
    error_exit "Failed to run dotfiles setup"
fi

# Step 2: Install required development tools  
log "Installing required development packages"
if bash "$DOTFILES_DIR/scripts/install_packages"; then
    log_success "Package installation completed successfully"
else
    error_exit "Failed to install required packages"
fi

section_header "Installation Complete"
log_complete "Dotfiles have been successfully installed!"
echo
echo "Your new environment is ready to use."
echo "Please restart your terminal or run exec bash to apply all changes."
